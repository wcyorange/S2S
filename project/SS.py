# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SS.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtWidgets import QFileDialog, QApplication


from sia.siamesepre import Siamesewcy
import json


import dlib
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from ugatit.models.ugatit import UGATIT
from ugatit.configs.cfgs_ugatit import test_cfgs as ugatit_cfgs
import torch
import cv2
from PIL import Image
import numpy as np

from siaws.siamese_skin import Siameseskin
from siaws.siamese_skull import Siameseskull
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *


class sia_skull(object):
        def __init__(self): #初始化
                self.model = Siameseskull()
        def sia_skull1(self, json5, json6):
                f1 = open(json5)
                f2 = open(json6)
                img1_dict = json.load(f1)
                img2_dict = json.load(f2)
                img1_path = img1_dict['open_fold']
                img2_path = img2_dict['open_fold']
                img1 = Image.open(img1_path)
                img2 = Image.open(img2_path)
                size1, size2 = img1.size, img2.size
                joint = Image.new('RGB', (size1[0] + size2[0], size1[1]))
                loc1, loc2 = (0, 0), (size1[0], 0)
                joint.paste(img1, loc1)
                joint.paste(img2, loc2)
                probability = self.model.detect_image(img1, img2)
                return joint, probability

class sia_skin(object):
        def __init__(self): #初始化
                self.model = Siameseskin()
        def sia_skin1(self, json7, json8):
                f1 = open(json7)
                f2 = open(json8)
                img1_dict = json.load(f1)
                img2_dict = json.load(f2)
                img1_path = img1_dict['open_fold']
                img2_path = img2_dict['open_fold']
                img1 = Image.open(img1_path)
                img2 = Image.open(img2_path)
                size1, size2 = img1.size, img2.size
                joint = Image.new('RGB', (size1[0] + size2[0], size1[1]))
                loc1, loc2 = (0, 0), (size1[0], 0)
                joint.paste(img1, loc1)
                joint.paste(img2, loc2)
                probability = self.model.detect_image(img1, img2)
                return joint, probability




class landmark(object):
        def __init__(self):
                self.detector = dlib.get_frontal_face_detector()
                self.predictor = dlib.shape_predictor('./landmark/shape_predictor_68_face_landmarks.dat')
        def mark(self,json4):
                f = open(json4)
                img_dict = json.load(f)
                image_path = img_dict['open_fold']
                img = cv2.imread(image_path)
                # img = Image.open(image_path)
                img_gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)

                rects = self.detector(img_gray, 0)
                for i in range(len(rects)):
                        landmarks = np.matrix([[p.x, p.y] for p in self.predictor(img, rects[i]).parts()])
                        for idx, point in enumerate(landmarks):
                                # 68点的坐标
                                pos = (point[0, 0], point[0, 1])
                                # print(idx, pos)
                                # 利用cv2.circle给每个特征点画一个圈，共68个
                                cv2.circle(img, pos, 1, (0, 0, 255), -1)
                                # print('1111111111')
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                return img



class siam(object):
        def __init__(self):
                self.model = Siamesewcy()
        def Similarity_detection(self,json1,json2):
                f1 = open(json1)
                f2 = open(json2)
                img1_dict = json.load(f1)
                img2_dict = json.load(f2)
                img1_path = img1_dict['open_fold']
                img2_path = img2_dict['open_fold']
                img1 = Image.open(img1_path)
                img2 = Image.open(img2_path)
                size1, size2 = img1.size, img2.size
                joint = Image.new('RGB', (size1[0] + size2[0], size1[1]))
                loc1, loc2 = (0, 0), (size1[0], 0)
                joint.paste(img1, loc1)
                joint.paste(img2, loc2)
                probability = self.model.detect_image(img1, img2)
                if probability < 0.5:
                        jieguo = "该颅骨和面貌非配对数据"
                        return joint, jieguo
                else:
                        jieguo = "该颅骨和面貌为配对数据"
                        return joint, jieguo
                # return joint, probability

class ugatit(object):
        def __init__(self):
                self.weight_loc = './ugatit/ckpt/145.pt'
                self.weight_set = torch.load(self.weight_loc, map_location='cpu')
                self.model_type = 'ugatit'
                self.ugatit_cfgs = ugatit_cfgs
                self.model = UGATIT(self.ugatit_cfgs)
                self.G_A = self.model.G_A


        def preprocessing(self, img):
                img = torch.from_numpy(img).float() / 255.0
                img = (img - 0.5) * 2
                img = img.permute(2, 0, 1).unsqueeze(0)
                return img

        def ugatit_self(self, json3):
                f1 = open(json3)
                img_dict = json.load(f1)
                image_path = img_dict['open_fold']

                size = 256

                self.G_A.load_state_dict(self.weight_set['G_A'])
                self.G_A.eval()

                if torch.cuda.is_available():
                        self.G_A.cuda()
                        dev = torch.device('cuda')
                else:
                        dev = torch.device('cpu')

                image = cv2.imread(image_path)
                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                img_tensor = self.preprocessing(image).to(dev)
                fakeB = self.G_A.test_forward(img_tensor, 'AtoB')
                fakeB = (fakeB * 0.5) + 0.5
                fakeB = fakeB.squeeze(0).permute(1, 2, 0)
                fakeB = fakeB.detach().cpu().numpy()* 255.0
                fakeB = fakeB.astype(np.uint8)  # RGB
                fig1 = Image.fromarray(fakeB)
                return fig1


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1112, 636)
        MainWindow.setStyleSheet("font-family:微软雅黑")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.sia = siam()
        self.ugat = ugatit()
        self.ff = landmark()
        self.siawsskin = sia_skin()
        self.siawsskull = sia_skull()
        self.label_CS_CR = QtWidgets.QTabWidget(self.centralwidget)
        self.label_CS_CR.setGeometry(QtCore.QRect(0, 70, 1251, 701))
        self.label_CS_CR.setStyleSheet("QTabWidget::pane{\n"
"min-width:70px;\n"
"min-height:25px;\n"
"border-top: 2px solid;\n"
"\n"
"}\n"
"\n"
"QTabBar::tab {\n"
"\n"
"min-width:230px;\n"
"\n"
"min-height:60px;\n"
"\n"
"color: white;\n"
"\n"
"font:20px \"Microsoft YaHei\";\n"
"\n"
"border: 0px solid;\n"
"\n"
"\n"
"\n"
"}\n"
"\n"
"QTabBar::tab:selected{\n"
"\n"
"min-width:180px;\n"
"\n"
"min-height:50px;\n"
"color: white;\n"
"\n"
"font:30px \"Microsoft YaHei\";\n"
"\n"
"border: 0px solid;\n"
"\n"
"border-bottom: 2px solid;\n"
"\n"
"border-color: #4796f0;\n"
"\n"
"}")
        self.label_CS_CR.setIconSize(QtCore.QSize(16, 16))
        self.label_CS_CR.setObjectName("label_CS_CR")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.dakai_obj = QtWidgets.QPushButton(self.tab_3)
        self.dakai_obj.setGeometry(QtCore.QRect(50, 20, 71, 31))
        self.dakai_obj.setObjectName("dakai_obj")
        self.zhanshi_obj = QtWidgets.QPushButton(self.tab_3)
        self.zhanshi_obj.setGeometry(QtCore.QRect(200, 20, 71, 31))
        self.zhanshi_obj.setObjectName("zhanshi_obj")
        self.label_lujing = QtWidgets.QLabel(self.tab_3)
        self.label_lujing.setGeometry(QtCore.QRect(20, 70, 281, 211))
        self.label_lujing.setText("")
        self.label_lujing.setObjectName("label_lujing")
        self.label = QtWidgets.QLabel(self.tab_3)
        self.label.setGeometry(QtCore.QRect(690, 20, 100, 100))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("img/logo.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_Title_2 = QtWidgets.QLabel(self.tab_3)
        self.label_Title_2.setGeometry(QtCore.QRect(430, 130, 591, 51))
        self.label_Title_2.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 45px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_Title_2.setObjectName("label_Title_2")
        self.label_2 = QtWidgets.QLabel(self.tab_3)
        self.label_2.setGeometry(QtCore.QRect(433, 210, 591, 151))
        self.label_2.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 15px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}")
        self.label_2.setObjectName("label_2")
        self.label_CS_CR.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.pushButton_tezheng_baocun = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_tezheng_baocun.setGeometry(QtCore.QRect(820, 60, 91, 31))
        self.pushButton_tezheng_baocun.setObjectName("pushButton_tezheng_baocun")
        self.label_CR_C_jieuguo_3 = QtWidgets.QLabel(self.tab_4)
        self.label_CR_C_jieuguo_3.setGeometry(QtCore.QRect(700, 60, 71, 35))
        self.label_CR_C_jieuguo_3.setMinimumSize(QtCore.QSize(0, 35))
        self.label_CR_C_jieuguo_3.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_CR_C_jieuguo_3.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_CR_C_jieuguo_3.setObjectName("label_CR_C_jieuguo_3")
        self.pushButton_tezheng_biaoding = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_tezheng_biaoding.setGeometry(QtCore.QRect(320, 60, 71, 31))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/3.1 好友.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_tezheng_biaoding.setIcon(icon)
        self.pushButton_tezheng_biaoding.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_tezheng_biaoding.setObjectName("pushButton_tezheng_biaoding")
        self.label_tezheng_yuantu = QtWidgets.QLabel(self.tab_4)
        self.label_tezheng_yuantu.setGeometry(QtCore.QRect(140, 140, 256, 256))
        self.label_tezheng_yuantu.setText("")
        self.label_tezheng_yuantu.setObjectName("label_tezheng_yuantu")
        self.pushButton_tezheng_shuru = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_tezheng_shuru.setGeometry(QtCore.QRect(200, 60, 91, 31))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("img/skin.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_tezheng_shuru.setIcon(icon1)
        self.pushButton_tezheng_shuru.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_tezheng_shuru.setObjectName("pushButton_tezheng_shuru")
        self.line3_7 = QtWidgets.QFrame(self.tab_4)
        self.line3_7.setGeometry(QtCore.QRect(520, 0, 20, 501))
        self.line3_7.setFrameShape(QtWidgets.QFrame.VLine)
        self.line3_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line3_7.setObjectName("line3_7")
        self.label_tezheng_zhanshi = QtWidgets.QLabel(self.tab_4)
        self.label_tezheng_zhanshi.setGeometry(QtCore.QRect(670, 140, 256, 256))
        self.label_tezheng_zhanshi.setText("")
        self.label_tezheng_zhanshi.setObjectName("label_tezheng_zhanshi")
        self.label_CR_C_shuru_3 = QtWidgets.QLabel(self.tab_4)
        self.label_CR_C_shuru_3.setGeometry(QtCore.QRect(90, 60, 71, 30))
        self.label_CR_C_shuru_3.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_CR_C_shuru_3.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_CR_C_shuru_3.setObjectName("label_CR_C_shuru_3")
        self.label_CS_CR.addTab(self.tab_4, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.label_cs_value = QtWidgets.QTextBrowser(self.tab)
        self.label_cs_value.setGeometry(QtCore.QRect(50, 370, 331, 61))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_cs_value.setFont(font)
        self.label_cs_value.setStyleSheet("background: transparent;border:0px")
        self.label_cs_value.setObjectName("label_cs_value")
        self.pushButton_CS_openSkin = QtWidgets.QPushButton(self.tab)
        self.pushButton_CS_openSkin.setGeometry(QtCore.QRect(160, 40, 91, 31))
        self.pushButton_CS_openSkin.setIcon(icon1)
        self.pushButton_CS_openSkin.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_CS_openSkin.setObjectName("pushButton_CS_openSkin")
        self.label_CS_result = QtWidgets.QLabel(self.tab)
        self.label_CS_result.setGeometry(QtCore.QRect(40, 160, 331, 161))
        self.label_CS_result.setText("")
        self.label_CS_result.setObjectName("label_CS_result")
        self.label_CS_shuru_2 = QtWidgets.QLabel(self.tab)
        self.label_CS_shuru_2.setGeometry(QtCore.QRect(40, 40, 71, 30))
        self.label_CS_shuru_2.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_CS_shuru_2.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_CS_shuru_2.setObjectName("label_CS_shuru_2")
        self.label_CS_openskin = QtWidgets.QLabel(self.tab)
        self.label_CS_openskin.setGeometry(QtCore.QRect(490, 90, 256, 256))
        self.label_CS_openskin.setText("")
        self.label_CS_openskin.setObjectName("label_CS_openskin")
        self.pushButton_CS_jiance = QtWidgets.QPushButton(self.tab)
        self.pushButton_CS_jiance.setGeometry(QtCore.QRect(730, 390, 81, 31))
        self.pushButton_CS_jiance.setObjectName("pushButton_CS_jiance")
        self.label_CS_xiangsixing_2 = QtWidgets.QLabel(self.tab)
        self.label_CS_xiangsixing_2.setGeometry(QtCore.QRect(50, 330, 71, 35))
        self.label_CS_xiangsixing_2.setMinimumSize(QtCore.QSize(0, 35))
        self.label_CS_xiangsixing_2.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_CS_xiangsixing_2.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_CS_xiangsixing_2.setObjectName("label_CS_xiangsixing_2")
        self.pushButton_CS_openSkull = QtWidgets.QPushButton(self.tab)
        self.pushButton_CS_openSkull.setGeometry(QtCore.QRect(280, 40, 91, 31))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("img/skull.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_CS_openSkull.setIcon(icon2)
        self.pushButton_CS_openSkull.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_CS_openSkull.setObjectName("pushButton_CS_openSkull")
        self.line3_3 = QtWidgets.QFrame(self.tab)
        self.line3_3.setGeometry(QtCore.QRect(420, 0, 20, 511))
        self.line3_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line3_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line3_3.setObjectName("line3_3")
        self.label_CS_openskull = QtWidgets.QLabel(self.tab)
        self.label_CS_openskull.setGeometry(QtCore.QRect(790, 90, 256, 256))
        self.label_CS_openskull.setText("")
        self.label_CS_openskull.setObjectName("label_CS_openskull")
        self.pushButton_CS_savepic = QtWidgets.QPushButton(self.tab)
        self.pushButton_CS_savepic.setGeometry(QtCore.QRect(160, 100, 91, 31))
        self.pushButton_CS_savepic.setObjectName("pushButton_CS_savepic")
        self.label_CS_jieuguo_2 = QtWidgets.QLabel(self.tab)
        self.label_CS_jieuguo_2.setGeometry(QtCore.QRect(40, 100, 71, 35))
        self.label_CS_jieuguo_2.setMinimumSize(QtCore.QSize(0, 35))
        self.label_CS_jieuguo_2.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_CS_jieuguo_2.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_CS_jieuguo_2.setObjectName("label_CS_jieuguo_2")
        self.label_CS_CR.addTab(self.tab, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.line_2 = QtWidgets.QFrame(self.tab_5)
        self.line_2.setGeometry(QtCore.QRect(140, 60, 231, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.pushButton_CS_jiance2 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_CS_jiance2.setGeometry(QtCore.QRect(860, 390, 81, 31))
        self.pushButton_CS_jiance2.setIcon(icon1)
        self.pushButton_CS_jiance2.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_CS_jiance2.setObjectName("pushButton_CS_jiance2")
        self.label_xsxvalue1 = QtWidgets.QTextBrowser(self.tab_5)
        self.label_xsxvalue1.setGeometry(QtCore.QRect(40, 400, 331, 51))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_xsxvalue1.setFont(font)
        self.label_xsxvalue1.setStyleSheet("color:gray;\n"
"background: transparent;border:0px\n"
"")
        self.label_xsxvalue1.setObjectName("label_xsxvalue1")
        self.label_CS_openskull2 = QtWidgets.QLabel(self.tab_5)
        self.label_CS_openskull2.setGeometry(QtCore.QRect(780, 110, 256, 256))
        self.label_CS_openskull2.setText("")
        self.label_CS_openskull2.setObjectName("label_CS_openskull2")
        self.label_CS_openskin1 = QtWidgets.QLabel(self.tab_5)
        self.label_CS_openskin1.setGeometry(QtCore.QRect(480, 110, 256, 256))
        self.label_CS_openskin1.setText("")
        self.label_CS_openskin1.setObjectName("label_CS_openskin1")
        self.label_CS_xiangsixing_5 = QtWidgets.QLabel(self.tab_5)
        self.label_CS_xiangsixing_5.setGeometry(QtCore.QRect(40, 360, 71, 35))
        self.label_CS_xiangsixing_5.setMinimumSize(QtCore.QSize(0, 35))
        self.label_CS_xiangsixing_5.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_CS_xiangsixing_5.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_CS_xiangsixing_5.setObjectName("label_CS_xiangsixing_5")
        self.label_CS_jieuguo_5 = QtWidgets.QLabel(self.tab_5)
        self.label_CS_jieuguo_5.setGeometry(QtCore.QRect(30, 130, 71, 35))
        self.label_CS_jieuguo_5.setMinimumSize(QtCore.QSize(0, 35))
        self.label_CS_jieuguo_5.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_CS_jieuguo_5.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_CS_jieuguo_5.setObjectName("label_CS_jieuguo_5")
        self.label_CS_result1 = QtWidgets.QLabel(self.tab_5)
        self.label_CS_result1.setGeometry(QtCore.QRect(30, 190, 331, 161))
        self.label_CS_result1.setText("")
        self.label_CS_result1.setObjectName("label_CS_result1")
        self.pushButton_CS_openSkull2 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_CS_openSkull2.setGeometry(QtCore.QRect(270, 30, 91, 31))
        self.pushButton_CS_openSkull2.setIcon(icon2)
        self.pushButton_CS_openSkull2.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_CS_openSkull2.setObjectName("pushButton_CS_openSkull2")
        self.pushButton_CS_savepic1 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_CS_savepic1.setGeometry(QtCore.QRect(150, 130, 91, 31))
        self.pushButton_CS_savepic1.setObjectName("pushButton_CS_savepic1")
        self.pushButton__CS_openSkin1 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton__CS_openSkin1.setGeometry(QtCore.QRect(150, 80, 91, 31))
        self.pushButton__CS_openSkin1.setIcon(icon1)
        self.pushButton__CS_openSkin1.setIconSize(QtCore.QSize(25, 25))
        self.pushButton__CS_openSkin1.setObjectName("pushButton__CS_openSkin1")
        self.label_CS_shuru_5 = QtWidgets.QLabel(self.tab_5)
        self.label_CS_shuru_5.setGeometry(QtCore.QRect(30, 50, 71, 30))
        self.label_CS_shuru_5.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_CS_shuru_5.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_CS_shuru_5.setObjectName("label_CS_shuru_5")
        self.pushButton_CS_jiance1 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_CS_jiance1.setGeometry(QtCore.QRect(600, 390, 81, 31))
        self.pushButton_CS_jiance1.setIcon(icon2)
        self.pushButton_CS_jiance1.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_CS_jiance1.setObjectName("pushButton_CS_jiance1")
        self.pushButton_CS1_openSkull1 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_CS1_openSkull1.setGeometry(QtCore.QRect(150, 30, 91, 31))
        self.pushButton_CS1_openSkull1.setIcon(icon2)
        self.pushButton_CS1_openSkull1.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_CS1_openSkull1.setObjectName("pushButton_CS1_openSkull1")
        self.pushButton__CS_openSkin2 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton__CS_openSkin2.setGeometry(QtCore.QRect(270, 80, 91, 31))
        self.pushButton__CS_openSkin2.setIcon(icon1)
        self.pushButton__CS_openSkin2.setIconSize(QtCore.QSize(25, 25))
        self.pushButton__CS_openSkin2.setObjectName("pushButton__CS_openSkin2")
        self.line3_6 = QtWidgets.QFrame(self.tab_5)
        self.line3_6.setGeometry(QtCore.QRect(390, 0, 20, 511))
        self.line3_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line3_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line3_6.setObjectName("line3_6")
        self.label_CS_CR.addTab(self.tab_5, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_shuru_2 = QtWidgets.QLabel(self.tab_2)
        self.label_shuru_2.setGeometry(QtCore.QRect(590, 610, 71, 30))
        self.label_shuru_2.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_shuru_2.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_shuru_2.setObjectName("label_shuru_2")
        self.pushButton_openSkull_2 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_openSkull_2.setGeometry(QtCore.QRect(660, 610, 91, 31))
        self.pushButton_openSkull_2.setIcon(icon2)
        self.pushButton_openSkull_2.setObjectName("pushButton_openSkull_2")
        self.label_CR_U_jieuguo_3 = QtWidgets.QLabel(self.tab_2)
        self.label_CR_U_jieuguo_3.setGeometry(QtCore.QRect(720, 40, 71, 35))
        self.label_CR_U_jieuguo_3.setMinimumSize(QtCore.QSize(0, 35))
        self.label_CR_U_jieuguo_3.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_CR_U_jieuguo_3.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_CR_U_jieuguo_3.setObjectName("label_CR_U_jieuguo_3")
        self.pushButton_CR_U_savepic = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_CR_U_savepic.setGeometry(QtCore.QRect(840, 40, 91, 31))
        self.pushButton_CR_U_savepic.setObjectName("pushButton_CR_U_savepic")
        self.label_CR_U_openskull = QtWidgets.QLabel(self.tab_2)
        self.label_CR_U_openskull.setGeometry(QtCore.QRect(140, 120, 256, 256))
        self.label_CR_U_openskull.setText("")
        self.label_CR_U_openskull.setObjectName("label_CR_U_openskull")
        self.label_CR_U_resultpic = QtWidgets.QLabel(self.tab_2)
        self.label_CR_U_resultpic.setGeometry(QtCore.QRect(700, 120, 256, 256))
        self.label_CR_U_resultpic.setText("")
        self.label_CR_U_resultpic.setObjectName("label_CR_U_resultpic")
        self.pushButton_CR_U_openSkull = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_CR_U_openSkull.setGeometry(QtCore.QRect(220, 40, 91, 31))
        self.pushButton_CR_U_openSkull.setIcon(icon2)
        self.pushButton_CR_U_openSkull.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_CR_U_openSkull.setObjectName("pushButton_CR_U_openSkull")
        self.pushButton_CR_U_fuyuan = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_CR_U_fuyuan.setGeometry(QtCore.QRect(340, 40, 71, 31))
        self.pushButton_CR_U_fuyuan.setIcon(icon1)
        self.pushButton_CR_U_fuyuan.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_CR_U_fuyuan.setObjectName("pushButton_CR_U_fuyuan")
        self.label_CR_U_shuru_3 = QtWidgets.QLabel(self.tab_2)
        self.label_CR_U_shuru_3.setGeometry(QtCore.QRect(110, 40, 71, 30))
        self.label_CR_U_shuru_3.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_CR_U_shuru_3.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_CR_U_shuru_3.setObjectName("label_CR_U_shuru_3")
        self.line2_3 = QtWidgets.QFrame(self.tab_2)
        self.line2_3.setGeometry(QtCore.QRect(540, 0, 20, 521))
        self.line2_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line2_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line2_3.setObjectName("line2_3")
        self.label_CS_CR.addTab(self.tab_2, "")
        self.label_beijing = QtWidgets.QLabel(self.centralwidget)
        self.label_beijing.setGeometry(QtCore.QRect(-110, -50, 1441, 861))
        self.label_beijing.setText("")
        self.label_beijing.setPixmap(QtGui.QPixmap("img/背景2.PNG"))
        self.label_beijing.setScaledContents(True)
        self.label_beijing.setObjectName("label_beijing")
        self.label_Title = QtWidgets.QLabel(self.centralwidget)
        self.label_Title.setGeometry(QtCore.QRect(270, 10, 591, 51))
        self.label_Title.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 45px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_Title.setObjectName("label_Title")
        self.label_beijing.raise_()
        self.label_CS_CR.raise_()
        self.label_Title.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1112, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.label_CS_CR.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton_CS_openSkin.clicked.connect(self.openImage1)
        self.pushButton_CS_openSkull.clicked.connect(self.openImage2)
        self.pushButton_CR_U_openSkull.clicked.connect(self.openImage3)
        self.pushButton_tezheng_shuru.clicked.connect(self.openImage4)
        self.pushButton_CS1_openSkull1.clicked.connect(self.openImage5)
        self.pushButton_CS_openSkull2.clicked.connect(self.openImage6)
        self.pushButton__CS_openSkin1.clicked.connect(self.openImage7)
        self.pushButton__CS_openSkin2.clicked.connect(self.openImage8)
        self.dakai_obj.clicked.connect(self.openImage9)
        self.pushButton_CS_savepic.clicked.connect(self.saveImage1)
        self.pushButton_CR_U_savepic.clicked.connect(self.saveImage2)
        self.pushButton_tezheng_baocun.clicked.connect(self.saveImage3)
        self.pushButton_CS_savepic1.clicked.connect(self.saveImage4)
        self.pushButton_CS_jiance.clicked.connect(self.siame)
        self.pushButton_CR_U_fuyuan.clicked.connect(self.U)
        self.pushButton_tezheng_biaoding.clicked.connect(self.fmark)
        self.pushButton_CS_jiance2.clicked.connect(self.siaskin)
        self.pushButton_CS_jiance1.clicked.connect(self.siaskull)
        self.zhanshi_obj.clicked.connect(self.open)
        # self.pushButton_openFile.clicked.connect(self.openTextFile)
        # self.pushButton_saveFile.clicked.connect(self.saveTextFile)
        # self.pushButton_openDirectory.clicked.connect(self.openDirectory)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "S2S"))
        self.dakai_obj.setText(_translate("MainWindow", "打开"))
        self.zhanshi_obj.setText(_translate("MainWindow", "展示"))
        self.label_Title_2.setText(_translate("MainWindow", "S2S：颅骨面貌身份认证平台"))
        self.label_2.setText(_translate("MainWindow", "本系统的功能为：\n"
"（1）三维数据展示：输入三维颅面数据并展示。\n"
"（2）面貌特征点标定：输入面貌数据，标定其68个人脸关键特征点。\n"
"（3）颅像重合：输入一对颅骨和面貌图片进行鉴定，验证该颅骨和面貌是否为配对数据。\n"
"（4）颅面相似性评价：输入一对颅骨或一对面貌数据，评价其相似性。\n"
"（5）颅面复原：输入颅骨数据，重建出该颅骨数据配对的面貌。\n"
""))
        self.label_CS_CR.setTabText(self.label_CS_CR.indexOf(self.tab_3), _translate("MainWindow", "三维显示"))
        self.pushButton_tezheng_baocun.setText(_translate("MainWindow", "保存结果"))
        self.label_CR_C_jieuguo_3.setText(_translate("MainWindow", "结果显示"))
        self.pushButton_tezheng_biaoding.setText(_translate("MainWindow", "FF"))
        self.pushButton_tezheng_shuru.setText(_translate("MainWindow", "Face"))
        self.label_CR_C_shuru_3.setText(_translate("MainWindow", "输入选择"))
        self.label_CS_CR.setTabText(self.label_CS_CR.indexOf(self.tab_4), _translate("MainWindow", "特征点标定"))
        self.label_cs_value.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'微软雅黑\'; font-size:20pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;\"><br /></p></body></html>"))
        self.pushButton_CS_openSkin.setText(_translate("MainWindow", "Skin"))
        self.label_CS_shuru_2.setText(_translate("MainWindow", "输入选择"))
        self.pushButton_CS_jiance.setText(_translate("MainWindow", "检测"))
        self.label_CS_xiangsixing_2.setText(_translate("MainWindow", "结果"))
        self.pushButton_CS_openSkull.setText(_translate("MainWindow", "Skull"))
        self.pushButton_CS_savepic.setText(_translate("MainWindow", "保存结果"))
        self.label_CS_jieuguo_2.setText(_translate("MainWindow", "结果显示"))
        self.label_CS_CR.setTabText(self.label_CS_CR.indexOf(self.tab), _translate("MainWindow", "颅相重合"))
        self.pushButton_CS_jiance2.setText(_translate("MainWindow", "检测"))
        self.label_xsxvalue1.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'微软雅黑\'; font-size:20pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_CS_xiangsixing_5.setText(_translate("MainWindow", "相似性"))
        self.label_CS_jieuguo_5.setText(_translate("MainWindow", "结果显示"))
        self.pushButton_CS_openSkull2.setText(_translate("MainWindow", "Skull"))
        self.pushButton_CS_savepic1.setText(_translate("MainWindow", "保存结果"))
        self.pushButton__CS_openSkin1.setText(_translate("MainWindow", "Skin"))
        self.label_CS_shuru_5.setText(_translate("MainWindow", "输入选择"))
        self.pushButton_CS_jiance1.setText(_translate("MainWindow", "检测"))
        self.pushButton_CS1_openSkull1.setText(_translate("MainWindow", "Skull"))
        self.pushButton__CS_openSkin2.setText(_translate("MainWindow", "Skin"))
        self.label_CS_CR.setTabText(self.label_CS_CR.indexOf(self.tab_5), _translate("MainWindow", "颅面相似性"))
        self.label_shuru_2.setText(_translate("MainWindow", "输入选择"))
        self.pushButton_openSkull_2.setText(_translate("MainWindow", "Skull"))
        self.label_CR_U_jieuguo_3.setText(_translate("MainWindow", "结果显示"))
        self.pushButton_CR_U_savepic.setText(_translate("MainWindow", "保存结果"))
        self.pushButton_CR_U_openSkull.setText(_translate("MainWindow", "Skull"))
        self.pushButton_CR_U_fuyuan.setText(_translate("MainWindow", "CR"))
        self.label_CR_U_shuru_3.setText(_translate("MainWindow", "输入选择"))
        self.label_CS_CR.setTabText(self.label_CS_CR.indexOf(self.tab_2), _translate("MainWindow", "颅面重建"))
        self.label_Title.setText(_translate("MainWindow", "S2S：颅骨面貌身份认证平台"))

    def openImage1(self):  # 选择本地图片上传
            config_file = 'config/openImage1.json'
            config = json.load(open(config_file, 'r', encoding='utf-8'))
            open_fold = config['open_fold']
            if not os.path.exists(open_fold):
                    open_fold = os.getcwd()
            name1, _ = QFileDialog.getOpenFileName(self.centralwidget, "Skin", "",
                                                   "All Files(*);;*.jpg;;*.png")
            jpg = QtGui.QPixmap(name1).scaled(self.label_CS_openskin.width(),
                                              self.label_CS_openskin.height())
            self.label_CS_openskin.setPixmap(jpg)  # 在label控件上显示选择的图片
            if name1:
                    config['open_fold'] = os.path.abspath(name1)
                    config_json = json.dumps(config, ensure_ascii=False, indent=2)
                    with open(config_file, 'w', encoding='utf-8') as f:
                            f.write(config_json)

    def openImage2(self):  # 选择本地图片上传
            config_file = 'config/openImage2.json'
            # config = json.load(open(config_file, 'r', encoding='utf-8'))
            config = json.load(open(config_file, 'r', encoding='utf-8'))
            open_fold = config['open_fold']
            if not os.path.exists(open_fold):
                    open_fold = os.getcwd()
            name2, _ = QFileDialog.getOpenFileName(self.centralwidget, "Skin", "",
                                                   "All Files(*);;*.jpg;;*.png")
            jpg = QtGui.QPixmap(name2).scaled(self.label_CS_openskull.width(),
                                              self.label_CS_openskull.height())  # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
            self.label_CS_openskull.setPixmap(jpg)  # 在label控件上显示选择的图片
            # self.label_CS_openskull.setText(imgName2)  # 显示所选图片的本地路径
            if name2:
                    config['open_fold'] = os.path.abspath(name2)
                    config_json = json.dumps(config, ensure_ascii=False, indent=2)
                    with open(config_file, 'w', encoding='utf-8') as f:
                            f.write(config_json)

    def openImage3(self):  # 选择本地图片上传
            config_file = 'config/openImage3.json'
            # config = json.load(open(config_file, 'r', encoding='utf-8'))
            config = json.load(open(config_file, 'r', encoding='utf-8'))
            open_fold = config['open_fold']
            if not os.path.exists(open_fold):
                    open_fold = os.getcwd()
            name3, _ = QFileDialog.getOpenFileName(self.centralwidget, "Skin", "",
                                                   "All Files(*);;*.jpg;;*.png")
            jpg = QtGui.QPixmap(name3).scaled(self.label_CR_U_openskull.width(),
                                              self.label_CR_U_openskull.height())  # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
            self.label_CR_U_openskull.setPixmap(jpg)  # 在label控件上显示选择的图片
            # self.label_CR_U_openskull.setText(imgName3)  # 显示所选图片的本地路径
            if name3:
                    config['open_fold'] = os.path.abspath(name3)
                    config_json = json.dumps(config, ensure_ascii=False, indent=2)
                    with open(config_file, 'w', encoding='utf-8') as f:
                            f.write(config_json)

    def openImage4(self):  # 选择本地图片上传
            config_file = 'config/openImage4.json'
            # config = json.load(open(config_file, 'r', encoding='utf-8'))
            config = json.load(open(config_file, 'r', encoding='utf-8'))
            open_fold = config['open_fold']
            if not os.path.exists(open_fold):
                    open_fold = os.getcwd()
            name4, _ = QFileDialog.getOpenFileName(self.centralwidget, "Skin", "",
                                                   "All Files(*);;*.jpg;;*.png")
            jpg = QtGui.QPixmap(name4).scaled(self.label_tezheng_yuantu.width(),
                                              self.label_tezheng_yuantu.height())  # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
            self.label_tezheng_yuantu.setPixmap(jpg)  # 在label控件上显示选择的图片
            # self.label_CR_C_openskull.setText(imgName4)  # 显示所选图片的本地路径
            if name4:
                    config['open_fold'] = os.path.abspath(name4)
                    config_json = json.dumps(config, ensure_ascii=False, indent=2)
                    with open(config_file, 'w', encoding='utf-8') as f:
                            f.write(config_json)

    def openImage5(self):  # 选择本地图片上传
            config_file = 'config/openImage5.json'
            config = json.load(open(config_file, 'r', encoding='utf-8'))
            open_fold = config['open_fold']
            if not os.path.exists(open_fold):
                    open_fold = os.getcwd()
            name1, _ = QFileDialog.getOpenFileName(self.centralwidget, "Skin", "",
                                                   "All Files(*);;*.jpg;;*.png")
            jpg = QtGui.QPixmap(name1).scaled(self.label_CS_openskin1.width(),
                                              self.label_CS_openskin1.height())
            self.label_CS_openskin1.setPixmap(jpg)  # 在label控件上显示选择的图片
            if name1:
                    config['open_fold'] = os.path.abspath(name1)
                    config_json = json.dumps(config, ensure_ascii=False, indent=2)
                    with open(config_file, 'w', encoding='utf-8') as f:
                            f.write(config_json)

    def openImage6(self):  # 选择本地图片上传
            config_file = 'config/openImage6.json'
            config = json.load(open(config_file, 'r', encoding='utf-8'))
            open_fold = config['open_fold']
            if not os.path.exists(open_fold):
                    open_fold = os.getcwd()
            name1, _ = QFileDialog.getOpenFileName(self.centralwidget, "Skin", "",
                                                   "All Files(*);;*.jpg;;*.png")
            jpg = QtGui.QPixmap(name1).scaled(self.label_CS_openskull2.width(),
                                              self.label_CS_openskull2.height())
            self.label_CS_openskull2.setPixmap(jpg)  # 在label控件上显示选择的图片
            if name1:
                    config['open_fold'] = os.path.abspath(name1)
                    config_json = json.dumps(config, ensure_ascii=False, indent=2)
                    with open(config_file, 'w', encoding='utf-8') as f:
                            f.write(config_json)

    def openImage7(self):  # 选择本地图片上传
            config_file = 'config/openImage7.json'
            config = json.load(open(config_file, 'r', encoding='utf-8'))
            open_fold = config['open_fold']
            if not os.path.exists(open_fold):
                    open_fold = os.getcwd()
            name1, _ = QFileDialog.getOpenFileName(self.centralwidget, "Skin", "",
                                                   "All Files(*);;*.jpg;;*.png")
            jpg = QtGui.QPixmap(name1).scaled(self.label_CS_openskin1.width(),
                                              self.label_CS_openskin1.height())
            self.label_CS_openskin1.setPixmap(jpg)  # 在label控件上显示选择的图片
            if name1:
                    config['open_fold'] = os.path.abspath(name1)
                    config_json = json.dumps(config, ensure_ascii=False, indent=2)
                    with open(config_file, 'w', encoding='utf-8') as f:
                            f.write(config_json)

    def openImage8(self):  # 选择本地图片上传
            config_file = 'config/openImage8.json'
            config = json.load(open(config_file, 'r', encoding='utf-8'))
            open_fold = config['open_fold']
            if not os.path.exists(open_fold):
                    open_fold = os.getcwd()
            name1, _ = QFileDialog.getOpenFileName(self.centralwidget, "Skin", "",
                                                   "All Files(*);;*.jpg;;*.png")
            jpg = QtGui.QPixmap(name1).scaled(self.label_CS_openskull2.width(),
                                              self.label_CS_openskull2.height())
            self.label_CS_openskull2.setPixmap(jpg)  # 在label控件上显示选择的图片
            if name1:
                    config['open_fold'] = os.path.abspath(name1)
                    config_json = json.dumps(config, ensure_ascii=False, indent=2)
                    with open(config_file, 'w', encoding='utf-8') as f:
                            f.write(config_json)

    def openImage9(self):  # 选择本地图片上传
            config_file = 'config/openImage9.json'
            config = json.load(open(config_file, 'r', encoding='utf-8'))
            open_fold = config['open_fold']
            if not os.path.exists(open_fold):
                    open_fold = os.getcwd()
            name1, _ = QFileDialog.getOpenFileName(self.centralwidget, "Skin", "",
                                                   "All Files(*);;*.obj")
            self.label_lujing.setText(name1)
            if name1:
                    config['open_fold'] = os.path.abspath(name1)
                    config_json = json.dumps(config, ensure_ascii=False, indent=2)
                    with open(config_file, 'w', encoding='utf-8') as f:
                            f.write(config_json)

    def saveImage1(self):  # 保存图片到本地
            screen = QApplication.primaryScreen()
            pix = screen.grabWindow(self.label_CS_result.winId())
            fd, type = QFileDialog.getSaveFileName(self.centralwidget, "保存结果", "", "*.png;;*.jpg;;All Files(*)")
            pix.save(fd)

    def saveImage2(self):  # 保存图片到本地
            screen = QApplication.primaryScreen()
            pix = screen.grabWindow(self.label_CR_U_resultpic.winId())
            fd, type = QFileDialog.getSaveFileName(self.centralwidget, "保存结果", "", "*.png;;*.jpg;;All Files(*)")
            pix.save(fd)

    def saveImage3(self):  # 保存图片到本地
            screen = QApplication.primaryScreen()
            pix = screen.grabWindow(self.label_tezheng_zhanshi.winId())
            fd, type = QFileDialog.getSaveFileName(self.centralwidget, "保存结果", "", "*.png;;*.jpg;;All Files(*)")
            pix.save(fd)

    def saveImage4(self):  # 保存图片到本地
            screen = QApplication.primaryScreen()
            pix = screen.grabWindow(self.label_CS_result1.winId())
            fd, type = QFileDialog.getSaveFileName(self.centralwidget, "保存结果", "", "*.png;;*.jpg;;All Files(*)")
            pix.save(fd)

    # def openDirectory(self):  # 打开文件夹（目录）
    #         fd = QFileDialog.getExistingDirectory(self.centralwidget, "选择文件夹", "")
    #         self.label_directoryPath.setText(fd)
    #
    # def openTextFile(self):  # 选择文本文件上传
    #         fd, fp = QFileDialog.getOpenFileName(self.centralwidget, "选择文件", "", "*.txt;;All Files(*)")
    #         f = open(fd, 'r')
    #         self.label_txt.setText(f.read())
    #         self.label_filePath.setText(fd)
    #         f.close()
    #
    # def saveTextFile(self):  # 保存文本文件
    #         fd, fp = QFileDialog.getSaveFileName(self.centralwidget, "保存文件", "", "*.txt;;All Files(*)")
    #         f = open(fd, 'w')
    #         f.write(self.label_txt.text())
    #         f.close()

    def siame(self):
            img, result = self.sia.Similarity_detection("config/openImage1.json", "config/openImage2.json")
            img = img.toqpixmap()
            self.label_CS_result.setScaledContents(True)  # 自适应QLabel大小

            self.label_CS_result.setPixmap(img)
            self.label_cs_value.setText(str(result))

    def U(self):
            img = self.ugat.ugatit_self("config/openImage3.json")
            # print(img)
            img = img.toqpixmap()
            self.label_CR_U_resultpic.setScaledContents(True)  # 自适应QLabel大小

            self.label_CR_U_resultpic.setPixmap(img)

    def fmark(self):
            img = self.ff.mark("config/openImage4.json")
            # frame = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            frame =img
            img = QImage(frame.data, frame.shape[1], frame.shape[0], frame.shape[2] * frame.shape[1],
                         QImage.Format_RGB888)
            self.label_tezheng_zhanshi.setScaledContents(True)

            self.label_tezheng_zhanshi.setPixmap(QPixmap.fromImage(img))

    def siaskull(self):
            img, result = self.siawsskull.sia_skull1("config/openImage5.json", "config/openImage6.json")
            img = img.toqpixmap()
            self.label_CS_result1.setScaledContents(True)  # 自适应QLabel大小

            self.label_CS_result1.setPixmap(img)
            self.label_xsxvalue1.setText(str(result))

    def siaskin(self):
            img, result = self.siawsskin.sia_skin1("config/openImage7.json", "config/openImage8.json")
            img = img.toqpixmap()
            self.label_CS_result1.setScaledContents(True)  # 自适应QLabel大小

            self.label_CS_result1.setPixmap(img)
            self.label_xsxvalue1.setText(str(result))

    def open(self):
            import vtkshow

            self.one = vtkshow.vtkMW()
            self.one.show()
